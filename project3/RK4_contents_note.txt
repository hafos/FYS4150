mat vk2(particles_.size(),3);
  mat vk3(particles_.size(),3);
  mat vk4(particles_.size(),3);
  mat rk1(particles_.size(),3);
  mat rk2(particles_.size(),3);
  mat rk3(particles_.size(),3);
  mat rk4(particles_.size(),3);
  std::vector<Particle> particles_old = particles_; // To store old particles
  std::vector<Particle> particles_new; // To store intermediate states while updating individual particles
  for (int i = 0; i < particles_.size(); i++)
  {
    // Get particle properties at old state
    vec f = total_force(i);
    vec r = particles_.at(i).position();
    vec v = particles_.at(i).velocity();
    double m = particles_.at(i).mass();
    double q = particles_.at(i).charge();

    vk1.at(i) = f/m; // slope of v at old
    rk1.at(i) = v; // slope of r at old

    // Set new particle properties at k1
    Particle p_new(q, m, r+0.5*rk1.at(i), v+0.5*vk1.at(i));
    particles_new.at(i) = p_new;
  }
  // Update particles to k1
  particles_ = particles_new;
  for (int i = 0; i < particles_.size(); i++)
  {
    // Get particle properties at k1 state
    vec f = total_force(i);
    vec r = particles_.at(i).position();
    vec v = particles_.at(i).velocity();
    double m = particles_.at(i).mass();
    double q = particles_.at(i).charge();

    vk2.at(i) = f/m; // slope of velocity at k1
    rk2.at(i) = v; // slope of r at k1

    // Set new particle properties at k2
    r = particles_old.at(i).position();
    v = particles_old.at(i).velocity();
    m = particles_old.at(i).mass();
    q = particles_old.at(i).charge();
    Particle p_new(q, m, r+0.5*rk2.at(i), v+0.5*vk2.at(i));
    particles_new.at(i) = p_new;
  }
  // Update particles to k2
  particles_ = particles_new;
  for (int i = 0; i < particles_.size(); i++)
  {
    // Get particle properties at k2 state
    vec f = total_force(i);
    vec r = particles_.at(i).position();
    vec v = particles_.at(i).velocity();
    double m = particles_.at(i).mass();
    double q = particles_.at(i).charge();

    vk3.at(i) = f/m; // slope of velocity at k2
    rk3.at(i) = v; // slope of r at k2

    // Set new particle properties at k3
    r = particles_old.at(i).position();
    v = particles_old.at(i).velocity();
    m = particles_old.at(i).mass();
    q = particles_old.at(i).charge();
    Particle p_new(q, m, r+rk3.at(i), v+vk3.at(i));
    particles_new.at(i) = p_new;
  }
  // Update particles to k3
  particles_ = particles_new;
  for (int i = 0; i < particles_.size(); i++)
  {
    // Get particle properties at k3 state
    vec f = total_force(i);
    vec r = particles_.at(i).position();
    vec v = particles_.at(i).velocity();
    double m = particles_.at(i).mass();
    double q = particles_.at(i).charge();

    vk4.at(i) = f/m; // slope of velocity at k3
    rk4.at(i) = v; // slope of r at k3
  }
  // Update particles with RK4 method
  for (int i = 0; i < particles_.size(); i++)
  {
    vec r = particles_old.at(i).position();
    vec v = particles_old.at(i).velocity();
    double m = particles_old.at(i).mass();
    double q = particles_old.at(i).charge();

    vec r_new = r + (1/6)*dt*(rk1.at(i) + 2*rk2.at(i) + 2*rk3.at(i) + rk4.at(i));
    vec v_new = v + (1/6)*dt*(vk1.at(i) + 2*vk2.at(i) + 2*vk3.at(i) + vk4.at(i));

    Particle p_new(q, m, r_new, v_new);

    particles_.at(i) = p_new;
  }
